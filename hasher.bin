#!/bin/bash
# Author James Wintermute, December 2022. 

#Count the number of CPU cores
cores=`cat /proc/cpuinfo | grep processor | wc -l`
multiplier=$(( 4* $cores ))

# Set the output filename
filename='hasher-'`date +"%Y-%m-%d-%H%M"`'.txt'
error='hasher-'`date +"%Y-%m-%d-%H%M"`'-error.txt'
artifacts='hasher-'`date +"%Y-%m-%d-%H%M"`'-artifacts.txt'
duplicate='hasher-'`date +"%Y-%m-%d-%H%M"`'-duplicate-hashes.txt'
remove_script='hasher-'`date +"%Y-%m-%d-%H%M"`'-remove-script.txt'

# Artifacts to find
file_include_list=( "Thumbs.db"
"desktop.ini"
"._.DS_Store"
".DS_Store"
"._*"
".*")

# Dirs to find
dir_clean_list=( '.wdmc'
'@eaDir')

#Read the path to hash
echo "Welcome to Hasher."
echo "Hasher finds pointless artifacts on your drive, helps you remove them, then hash sum your remaining important files"
echo ""
echo Your current path is: $(pwd)
echo ""

# Develop: Path selector, doesn't work typing it.
read -p "Please enter a path to start hashing from: " $r1
parent=$(dirname "$r1")

# Cleaning operations
# function artifacts(){
    find -type d -name $dir_clean_list | find -type f -name $file_include_list | xargs -P $cores -L $multiplier >$artifacts
    sed -E "s/^.\//rm \-rfv \"/;s/\$/\"/" $artifacts >> $remove_script
#}

# Hashing operations
# function hashmyfiles(){
    echo "Cleanup list written. Moving to main hashing."
    time find "$parent" -type f -print0 | xargs -P $cores -L $multiplier -0 sha1sum | sed 's\  \,\g' >$filename | watch tail -n 4 $filename
    echo Hashing results output to $filename
    echo Outputting duplicate hashes
    cat $filename | cut -f1 -d"," | uniq -d >> $duplicate
#}

# Options list: Not yet functional
#menu(){
#echo -ne "
#Selection list
#$(artifacts '1)') Search for artifacts to cleanup
#$(hashmyfiles '2)') hash my files "
# read a
# case $a in
# 1) artifacts; menu ;;
# 2) hashmyfiles ; menu ;;
#esac
#}

# call the menu
#menu
