#!/bin/sh
# Hasher — Minimal dependency & readiness check (BusyBox/POSIX safe)
# Usage: bin/check-deps.sh [--fix]
#  - Verifies required tools and directory layout
#  - Reports CPU cores and basic environment
#  - If --fix and OpenSSL is available, creates shims for *sum tools (sha256sum, sha1sum, sha512sum, md5sum)

set -eu

BIN_DIR="$(cd -- "$(dirname "$0")" && pwd -P)"
ROOT_DIR="$(cd "$BIN_DIR/.." && pwd -P)"
FIX=0
[ "${1:-}" = "--fix" ] && FIX=1

# Colors if TTY
if [ -t 1 ]; then
  GRN='\033[0;32m'; YEL='\033[1;33m'; RED='\033[0;31m'; CYN='\033[0;36m'; RST='\033[0m'
else
  GRN=''; YEL=''; RED=''; CYN=''; RST=''
fi

have() { command -v "$1" >/dev/null 2>&1; }

ok()   { printf "%s[OK]%s     %s\n"   "$GRN" "$RST" "$1"; }
warn() { printf "%s[WARN]%s   %s\n"   "$YEL" "$RST" "$1"; }
err()  { printf "%s[ERROR]%s  %s\n"   "$RED" "$RST" "$1"; }

mkdir -p "$ROOT_DIR/logs" "$ROOT_DIR/hashes" "$ROOT_DIR/zero-length" 2>/dev/null || true

echo "${CYN}System check (deps & readiness)…${RST}"

# OS/arch
UNAME_S="$(uname -s 2>/dev/null || echo unknown)"
UNAME_M="$(uname -m 2>/dev/null || echo unknown)"
echo "Platform: $UNAME_S ($UNAME_M)"

# CPU cores
CORES=""
if have getconf; then
  CORES="$(getconf _NPROCESSORS_ONLN 2>/dev/null || true)"
fi
[ -z "$CORES" ] && have nproc && CORES="$(nproc 2>/dev/null || true)"
[ -z "$CORES" ] && [ -r /proc/cpuinfo ] && CORES="$(grep -c '^processor' /proc/cpuinfo 2>/dev/null || true)"
[ -z "$CORES" ] && CORES="unknown"
echo "CPU cores: $CORES"

# Open files limit
if have ulimit; then
  # ulimit is a shell builtin; this may run only in interactive shells, so we try via sh -c
  OF="$(sh -c 'ulimit -n' 2>/dev/null || true)"
  [ -n "$OF" ] && echo "ulimit -n (open files): $OF" || echo "ulimit -n (open files): unknown"
fi

echo
echo "Directories:"
[ -d "$ROOT_DIR/logs" ]         && ok "logs/ present"         || warn "logs/ missing"
[ -d "$ROOT_DIR/hashes" ]       && ok "hashes/ present"       || warn "hashes/ missing"
[ -d "$ROOT_DIR/zero-length" ]  && ok "zero-length/ present"  || warn "zero-length/ missing"

echo
echo "Required tools:"
REQUIRED="bash awk sed grep find stat wc tr cut sort head tail date"
missing_req=0
for t in $REQUIRED; do
  if have "$t"; then ok "$t"; else err "$t (missing)"; missing_req=1; fi
done

# GNU vs BSD stat check (macOS warning)
if echo "TEST" >/dev/null 2>&1; then
  if ! stat -c %s "$0" >/dev/null 2>&1; then
    warn "Your 'stat' may not support GNU -c (macOS/BSD). On macOS install coreutils and set PATH so 'stat' = 'gstat'."
  fi
fi

echo
echo "Hashing tools (preferred → fallback to OpenSSL shims):"
HAVE_OPENSSL=0
have openssl && HAVE_OPENSSL=1

need_shim=0
for algo in sha256 sha1 sha512 md5; do
  tool="${algo}sum"
  if have "$tool"; then
    ok "$tool"
  else
    if [ "$HAVE_OPENSSL" -eq 1 ]; then
      warn "$tool (missing) → will provide shim via OpenSSL"
      need_shim=1
    else
      err "$tool (missing) and no OpenSSL available"
      missing_req=1
    fi
  fi
done

# b2sum (optional)
if have b2sum; then
  ok "b2sum"
else
  warn "b2sum (optional, for BLAKE2) not found"
fi

# niceness tools
have nice   && ok "nice"   || warn "nice (missing)"
have ionice && ok "ionice" || warn "ionice (optional; not always present on NAS)"

# Try to install shims if requested
if [ "$FIX" -eq 1 ] && [ "$need_shim" -eq 1 ] && [ "$HAVE_OPENSSL" -eq 1 ]; then
  echo
  echo "Creating OpenSSL-based shims in bin/…"
  mkdir -p "$BIN_DIR"
  mk_shim() {
    name="$1"; ossl_flag="$2"
    path="$BIN_DIR/$name"
    cat > "$path" <<EOF
#!/bin/sh
# shim generated by check-deps.sh
exec openssl dgst -r -$ossl_flag "\$@"
EOF
    chmod +x "$path"
    ok "shim: $name -> openssl -$ossl_flag"
  }
  have sha256sum || mk_shim sha256sum sha256
  have sha1sum   || mk_shim sha1sum   sha1
  have sha512sum || mk_shim sha512sum sha512
  have md5sum    || mk_shim md5sum    md5
fi

echo
if [ "$missing_req" -eq 0 ]; then
  echo "${GRN}All required dependencies look good.${RST}"
  echo "You can start hashing from the launcher."
  exit 0
else
  echo "${YEL}Some required tools are missing.${RST}"
  echo "Tips:"
  echo "  • Debian/Ubuntu:    sudo apt-get install bash coreutils findutils gawk sed grep"
  echo "  • RHEL/CentOS:      sudo yum install bash coreutils findutils gawk sed grep"
  echo "  • macOS (Homebrew): brew install bash coreutils findutils gawk gnu-sed grep"
  echo "  • Synology:         use ipkg/opkg/Entware where applicable, or enable SSH and install required packages."
  exit 1
fi
